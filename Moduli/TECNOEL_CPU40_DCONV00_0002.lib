//*************************************************************************************************
//************** Gestione Protocollo DCon con 2 Moduli In + 2 Moduli Out + 1 Modulo Misto
//*************************************************************************************************


/*** BeginHeader TaskDConV00*/
void TaskDConV00();
void TaskDConV00_Scanner();
void TaskDConV00_Init();
/*** EndHeader  */

#define IO_DCON_RUN_WAIT 1
#define IO_DCON_SCAN_WAIT 10

// Codifica Word Configurazione Modulo DCON_SCANNE
// Start Scanner         B00
// Start Config          B01
// Velocità Attuale      B02..B03 00..02 (9600.19200.38400)
// Indirizzo Attuale     B04..B07 00..15
// Velocità Next         B08..B09 00..02 (9600.19200.38400)
// Indirizzo Next        B10..B13 00..15
// CU (Counter Update)   B14
// CS (CheckSum Setting) B15

unsigned int TaskDConV00_PC;
unsigned int TaskDConV00_Timer00;

unsigned int TaskDConV00_TaskTimer;
unsigned int TaskDConV00_TaskTimeOut;
unsigned int TaskDConV00_RxCounter;
unsigned int TaskDConV00_Preset;
unsigned int TaskDConV00_Latch0;
unsigned int TaskDConV00_Latch1;
unsigned int TaskDConV00_Memo[3];
char         TaskDConV00_RxString[200];

unsigned int TaskDConV00_ScannerModuleCounter;
unsigned int TaskDConV00_ScannerSerVelCounter;
char         TaskDConV00_ScannerString[30];

int TaskDConV00_SerOpen(long baud){switch (DConPort)    {case 1: {return serBopen(baud); break;} case 2: {return serDopen(baud); break;} case 3: {return serCopen(baud); break;}  default:  return 0;}}
int TaskDConV00_SerPuts(char* s)  {switch (DConPort)    {case 1: {return serBputs(s); break;} case 2: {return serDputs(s); break;} case 3: {return serCputs(s); break;}  default:  return 0;}}
int TaskDConV00_SerGetc()         {switch (DConPort)    {case 1: {return serBgetc(); break;} case 2: {return serDgetc(); break;} case 3: {return serCgetc(); break;}  default:  return -1;}}
int TaskDConV00_SerPutc(char c)   {switch (DConPort)    {case 1: {return serBputc(c); break;} case 2: {return serDputc(c); break;} case 3: {return serCputc(c); break;}  default:  return -1;}}

void TaskDConV00_Init()
{
 auto int Cont1;
 TaskDConV00_PC=0;
 TaskDConV00_Timer00=BiosIOGetNewTimer();
 TaskDConV00_Memo[0]=0;
 TaskDConV00_Memo[1]=0;
 TaskDConV00_Memo[2]=0;
 TaskDConV00_Preset=0xFFFF;
 TaskDConV00_TaskTimer=0;
 BiosIOSetReg(DCON_SCANNE,0);
 TaskDConV00_SerOpen(38400);
 TaskDConV00_TaskTimeOut=IO_DCON_RUN_WAIT;
}

void TaskDConV00_ScannerInit()
{
 switch (TaskDConV00_ScannerSerVelCounter)
  {
  case 0: {TaskDConV00_SerOpen(9600); break;}
  case 1: {TaskDConV00_SerOpen(19200); break;}
  case 2: {TaskDConV00_SerOpen(38400); break;}
  }
 TaskDConV00_PC=1;
}

void TaskDConV00_RunInit()
{
 TaskDConV00_PC=0;
 TaskDConV00_SerOpen(38400);
 TaskDConV00_TaskTimeOut=IO_DCON_RUN_WAIT;
 BiosIOSetBitReg(DCON_SCANNE,0,0);
 BiosIOSetBitReg(DCON_SCANNE,1,0);
}

void TaskDConV00_TxQuery(char *Ingresso, char *Data, unsigned int rnext, unsigned int rjump, unsigned int ModAddr)
{
 auto unsigned int Cont1;
 if (!BiosIOGetBitReg(DCON_CNFPRE,ModAddr)) {BiosIOSetBitReg(DCON_CNFPRE,ModAddr+8,0);}
 if ((rjump!=0) && (!BiosIOGetBitReg(DCON_CNFPRE,ModAddr))) {TaskDConV00_PC=rjump; return;}
 for (Cont1=0; Cont1<strlen(Ingresso); Cont1++)
  {
  TaskDConV00_SerPutc(Ingresso[Cont1]);
  }
 for (Cont1=0; Cont1<strlen(Data); Cont1++)
  {
  TaskDConV00_SerPutc(Data[Cont1]);
  }
 TaskDConV00_SerPutc(0x0D);
 TaskDConV00_PC=rnext; TaskDConV00_TaskTimer=TaskDConV00_TaskTimeOut;
}

void TaskDConV00_RxAnswer()
{
 auto int Comando;
 TaskDConV00_RxCounter=0;
 Comando=0;
 while (Comando!=-1 && TaskDConV00_RxCounter<60)
  {
  Comando=TaskDConV00_SerGetc();
  if (Comando!=-1 && TaskDConV00_RxCounter<60)
   {
   TaskDConV00_RxString[TaskDConV00_RxCounter]=Comando;
   TaskDConV00_RxCounter++;
   //printf("%d ",Comando);
   }
  }
 //printf(" Next %d\n",BiosIOModbusRxCounter);
}

void TaskDConV00_RxTest(unsigned int rnext, unsigned int ctest, unsigned int vreg, unsigned int vspam, unsigned int *Risultato, unsigned int ModAddr, unsigned int Bytes)
{
 auto unsigned int Test;
 TaskDConV00_TaskTimer--; if (TaskDConV00_TaskTimer!=0) return;
 TaskDConV00_RxAnswer();
 Test=0;
 if (TaskDConV00_RxCounter==ctest)
  {
  //printf("Input: %s\n",TaskDConV00_RxString+6);
  if ((vspam==99) || (BiosUTILHexAsciiToUInt(TaskDConV00_RxString+vspam,Bytes,&Test)))
   {
   if (vreg!=0) BiosIOSetReg(vreg,Test);
   *Risultato=Test;
   BiosIOSetBitReg(DCON_CNFPRE,ModAddr+8,1);
   //printf("Validated Input: %d\n",ModAddr);
   }
  else
   {
   BiosIOSetBitReg(DCON_CNFPRE,ModAddr+8,0);
   }
  }
 else
  {
  //printf("Error: %d %d\n",TaskDConV00_RxCounter,rnext);
  BiosIOSetBitReg(DCON_CNFPRE,ModAddr+8,0);
  }
 TaskDConV00_PC=rnext;
}

void TaskDConV00_RxFree(unsigned int oknext, unsigned int konext, unsigned int ctest)
{
 auto unsigned int Test;
 auto char TestStr[20];
 TaskDConV00_TaskTimer--; if (TaskDConV00_TaskTimer!=0) return;
 TaskDConV00_RxAnswer();
 if (TaskDConV00_RxCounter>=ctest)
  {
  TaskDConV00_PC=oknext;
  }
 else
  {
  //printf("Error: %d %d\n",TaskDConV00_RxCounter,konext);
  TaskDConV00_PC=konext;
  }
}

void TaskDConV00_Variato(char Modulo)
{
 auto char Cont1;
 auto char MaxTest;
 if (bit(&TaskDConV00_Preset,Modulo))
  {
  TaskDConV00_Memo[0+Modulo]=BiosIOGetReg(DCON_DCNI00+Modulo);
  TaskDConV00_Latch0=0;
  TaskDConV00_Latch1=0;
  res(&TaskDConV00_Preset,Modulo);
  }
 if (Modulo==2) MaxTest=7; else MaxTest=16;
 //for (Cont1=0; Cont1<MaxTest; Cont1++)
 // {
 // if (!bit(&TaskDConV00_Memo[0+Modulo],Cont1) && bit(&TaskDConV00_Latch1,Cont1))  {TaskScenV00_Released(Modulo*16+Cont1); set(&TaskDConV00_Memo[0+Modulo],Cont1);}
 // else
 // if (bit(&TaskDConV00_Memo[0+Modulo],Cont1)  && bit(&TaskDConV00_Latch0,Cont1))  {TaskScenV00_Pressed(Modulo*16+Cont1);  res(&TaskDConV00_Memo[0+Modulo],Cont1);}
 // }
}

unsigned int TaskDConV00_TestLatched(char Modulo)
{
 if (Modulo==2) {TaskDConV00_Latch0=TaskDConV00_Latch0 & 0x007F; TaskDConV00_Latch1=TaskDConV00_Latch1 | 0xFF80;}
 return (TaskDConV00_Latch0^TaskDConV00_Latch1)!=0xFFFF;
}


void TaskDConV00_End()
{
 TaskDConV00_PC=0;
}

void TaskDConV00_Scanner()
{
 auto unsigned int Risultato;
 auto char SendStr[20];
  if (TaskDConV00_TaskTimeOut==IO_DCON_RUN_WAIT)
  {
  TaskDConV00_ScannerSerVelCounter=0; TaskDConV00_ScannerModuleCounter=0; TaskDConV00_PC=0;
  TaskDConV00_TaskTimeOut=IO_DCON_SCAN_WAIT;
  }
 switch (TaskDConV00_PC)
                     {
                     case  0:  {TaskDConV00_ScannerInit(); break;}
                     case  1:  {strcpy(SendStr,"$"); BiosUTIL2HEXStrAppend(SendStr,TaskDConV00_ScannerModuleCounter); strcat(SendStr,"2"); TaskDConV00_TxQuery(SendStr,"",2,0,TaskDConV00_ScannerModuleCounter); break;}
                     case  2:  {TaskDConV00_RxFree(3,20,15); break;}
                     case  3:  {
                               strncpy(TaskDConV00_ScannerString,TaskDConV00_RxString+5,9); TaskDConV00_ScannerString[9]=0;
                               #ifdef DEBUG
                               printf("Scanner Found %d %d\n",TaskDConV00_ScannerSerVelCounter,TaskDConV00_ScannerModuleCounter);
                               #endif
                               TaskDConV00_PC=4; break;
                               }
                     case  4:  {strcpy(SendStr,"$"); BiosUTIL2HEXStrAppend(SendStr,TaskDConV00_ScannerModuleCounter); strcat(SendStr,"M"); TaskDConV00_TxQuery(SendStr,"",5,0,TaskDConV00_ScannerModuleCounter); break;}
                     case  5:  {TaskDConV00_RxFree(6,20,13); break;}
                     case  6:  {
                               strncat(TaskDConV00_ScannerString,TaskDConV00_RxString+5,9);
                               TaskMessV00_SetData(TaskDConV00_ScannerString);
                               TaskMessV00_MessaggioPush("DCON",TaskDConV00_ScannerSerVelCounter,"!00");
                               TaskDConV00_PC=20; break;
                               }
                     // Proceed with next module
                     case 20:  {
                               TaskDConV00_ScannerModuleCounter++;
                               if (TaskDConV00_ScannerModuleCounter>15)
                                {
                                TaskDConV00_ScannerSerVelCounter++;
                                TaskDConV00_ScannerModuleCounter=0;
                                if (TaskDConV00_ScannerSerVelCounter>2) {TaskDConV00_RunInit(); return;}
                                }
                               TaskDConV00_PC=0;
                               }
                     }
}

void TaskDConV00_SConfig()
{
 auto unsigned int Risultato;
 auto unsigned int NewSerVel;
 auto unsigned int NewModAdd;
 auto char SendStr[20];
 if (TaskDConV00_TaskTimeOut==IO_DCON_RUN_WAIT)
  {
  Risultato=BiosIOGetReg(DCON_SCANNE); Risultato=Risultato/4;  TaskDConV00_ScannerSerVelCounter=Risultato & 0x03;
  TaskDConV00_TaskTimeOut=IO_DCON_SCAN_WAIT;
  #ifdef DEBUG
  printf("SetModuleInit: %d\n",TaskDConV00_ScannerSerVelCounter);
  #endif
  TaskDConV00_ScannerInit();
  return;
  }
 switch (TaskDConV00_PC)
                     {
                     case  1:  {
                               Risultato=BiosIOGetReg(DCON_SCANNE);
                               Risultato=Risultato/16; TaskDConV00_ScannerModuleCounter=Risultato & 0x0F;
                               Risultato=Risultato/16; NewSerVel=Risultato & 0x03;
                               Risultato=Risultato/4;  NewModAdd=Risultato & 0x0F;
                               strcpy(SendStr,"%");
                               BiosUTIL2HEXStrAppend(SendStr,TaskDConV00_ScannerModuleCounter);
                               BiosUTIL2HEXStrAppend(SendStr,NewModAdd);
                               BiosUTIL2HEXStrAppend(SendStr,0x40);
                               BiosUTIL2HEXStrAppend(SendStr,NewSerVel+6);
                               BiosUTIL2HEXStrAppend(SendStr,0);
                               #ifdef DEBUG
                               printf("Module Config: %s\n",SendStr);
                               #endif
                               TaskDConV00_TxQuery(SendStr,"",2,0,TaskDConV00_ScannerModuleCounter);
                               break;
                               }
                     case  2:  {
  										 TaskDConV00_RxFree(3,4,15);
                               break;
                               }
                     case  3:  {
                               strncpy(TaskDConV00_ScannerString,TaskDConV00_RxString+12,3); TaskDConV00_ScannerString[3]=0;
                               #ifdef DEBUG
                               printf("Fatto: %s\n",TaskDConV00_ScannerString);
                               #endif
                               TaskDConV00_RunInit();
                               break;
                               }
                     case  4:  {
                               #ifdef DEBUG
                               printf("Rotto: %d\n",TaskDConV00_RxCounter);
                               #endif
                               TaskDConV00_RunInit();
                               break;
                               }
                     }
}

void TaskDConV00()
{
 auto char Data[5];
 auto unsigned int Risultato;
 if (BiosIOGetBitReg(DCON_SCANNE,0)) {TaskDConV00_Scanner(); return;}
 if (BiosIOGetBitReg(DCON_SCANNE,1)) {TaskDConV00_SConfig(); return;}
 switch (TaskDConV00_PC)
                     {
                     case  0:  {TaskDConV00_TxQuery("$00L0","",1,8,0); break;}  // Leggi Latch a 0 Modulo 00
                     case  1:  {TaskDConV00_RxTest(2,14,0,7,&TaskDConV00_Latch0,0,4); break;}

                     case  2:  {TaskDConV00_TxQuery("$00L1","",3,8,0); break;}  // Leggi Latch a 1 Modulo 00
                     case  3:  {TaskDConV00_RxTest(4,14,0,7,&TaskDConV00_Latch1,0,4); break;}

                     case  4:  {TaskDConV00_TxQuery("$006","",5,8,0); break;}   // Leggi Input Modulo 00
                     case  5:  {TaskDConV00_RxTest(6,13,DCON_DCNI00,6,&Risultato,0,4); break;}

                     case  6:  {if (TaskDConV00_TestLatched(0)) TaskDConV00_TxQuery("$00C","",7,8,0); else TaskDConV00_PC=8; TaskDConV00_Variato(0); break;}
                     case  7:  {TaskDConV00_RxTest(8,9,0,99,&Risultato,0,4); break;}


                     case  8:  {TaskDConV00_TxQuery("$01L0","",9,16,1); break;}  // Leggi Latch a 0 Modulo 01
                     case  9:  {TaskDConV00_RxTest(10,14,0,7,&TaskDConV00_Latch0,1,4); break;}

                     case 10:  {TaskDConV00_TxQuery("$01L1","",11,16,1); break;}  // Leggi Latch a 1 Modulo 01
                     case 11:  {TaskDConV00_RxTest(12,14,0,7,&TaskDConV00_Latch1,1,4); break;}

                     case 12:  {TaskDConV00_TxQuery("$016","",13,16,1); break;}   // Leggi Input Modulo 01
                     case 13:  {TaskDConV00_RxTest(14,13,DCON_DCNI01,6,&Risultato,1,4); break;}

                     case 14:  {if (TaskDConV00_TestLatched(1)) TaskDConV00_TxQuery("$01C","",15,16,1); else TaskDConV00_PC=16; TaskDConV00_Variato(1); break;}
                     case 15:  {TaskDConV00_RxTest(16,9,0,99,&Risultato,1,4); break;}


                     case 16:  {TaskDConV00_TxQuery("$04L0","",17,24,4); break;}  // Leggi Latch a 0 Modulo 04
                     case 17:  {TaskDConV00_RxTest(18,14,0,7,&TaskDConV00_Latch0,4,4); break;}

                     case 18:  {TaskDConV00_TxQuery("$04L1","",19,24,4); break;}  // Leggi Latch a 1 Modulo 04
                     case 19:  {TaskDConV00_RxTest(20,14,0,7,&TaskDConV00_Latch1,4,4); break;}

                     case 20:  {TaskDConV00_TxQuery("$046","",21,24,4); break;}   // Leggi Input Modulo 04
                     case 21:  {TaskDConV00_RxTest(22,13,DCON_DCNI04,8,&Risultato,4,2); break;}

                     case 22:  {if (TaskDConV00_TestLatched(2)) TaskDConV00_TxQuery("$04C","",23,24,4); else TaskDConV00_PC=24; TaskDConV00_Variato(2); break;}
                     case 23:  {TaskDConV00_RxTest(24,9,0,99,&Risultato,4,4); break;}


                     case 24:  {BiosUTILUIntTo4HEXASCII(BiosIOGetReg(DCON_DCNO02),Data); TaskDConV00_TxQuery("@02",Data,25,26,2); break;}  // Set Output Modulo 02
                     case 25:  {TaskDConV00_RxTest(26,10,0,99,&Risultato,2,4); break;}

                     case 26:  {BiosUTILUIntTo4HEXASCII(BiosIOGetReg(DCON_DCNO03),Data); TaskDConV00_TxQuery("@03",Data,27,28,3); break;}  // Set Output Modulo 03
                     case 27:  {TaskDConV00_RxTest(28,10,0,99,&Risultato,3,4); break;}

                     case 28:  {BiosUTILCharTo2HEXASCII(BiosIOGetReg(DCON_DCNO04),Data); TaskDConV00_TxQuery("@04",Data,29,30,4); break;}  // Set Output Modulo 04
                     case 29:  {TaskDConV00_RxTest(30,8,0,99,&Risultato,4,4); break;}

                     case 30:  {TaskDConV00_End(); break;}

                     case 99: {break;}
                     }
}

